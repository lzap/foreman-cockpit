diff --git a/bundler.d/puma.rb b/bundler.d/puma.rb
new file mode 100644
index 0000000..d93af73
--- /dev/null
+++ b/bundler.d/puma.rb
@@ -0,0 +1,11 @@
+group :puma do
+  if RUBY_VERSION < '2.3'
+    # Important!
+    # The last actual version that supports v2.0.0 up to v2.2.0 is 3.10.0
+    # Puma version 3.11.0 changed the usage of socket to a feature that is not
+    # supported by Ruby 2.2.0 and lower, and it causes a crash on TLS!
+    gem 'puma', '~>3.10.0', :require => 'puma'
+  else
+    gem 'puma', '~>3.12', :require => 'puma'
+  end
+end
diff --git a/lib/launcher.rb b/lib/launcher.rb
index 7bb79f8..7421b0d 100644
--- a/lib/launcher.rb
+++ b/lib/launcher.rb
@@ -4,6 +4,8 @@ require 'proxy/settings'
 require 'proxy/signal_handler'
 require 'proxy/log_buffer/trace_decorator'
 require 'thread'
+require 'rack'
+require 'webrick'

 module Proxy
   class Launcher
@@ -13,18 +15,30 @@ module Proxy

     def initialize(settings = SETTINGS)
       @settings = settings
+      @settings.http_server_type = Proxy::SETTINGS.http_server_type.to_sym
+      if @settings.http_server_type == :puma
+        begin
+          require 'puma'
+          require 'rack/handler/puma'
+          require 'puma-patch'
+        rescue LoadError
+          logger.warn 'Puma was requested but not installed, falling back to webrick'
+          @settings.http_server_type = :webrick
+        end
+      end
+      @servers = []
     end

     def pid_path
-      settings.daemon_pid
+      @settings.daemon_pid
     end

     def http_enabled?
-      !settings.http_port.nil?
+      !@settings.http_port.nil?
     end

     def https_enabled?
-      settings.ssl_private_key && settings.ssl_certificate && settings.ssl_ca_file
+      @settings.ssl_private_key && @settings.ssl_certificate && @settings.ssl_ca_file
     end

     def plugins
@@ -47,7 +61,7 @@ module Proxy

       {
         :app => app,
-        :server => :webrick,
+        :server => @settings.http_server_type,
         :DoNotListen => true,
         :Port => http_port, # only being used to correctly log http port being used
         :Logger => ::Proxy::LogBuffer::TraceDecorator.instance,
@@ -74,8 +88,8 @@ module Proxy
       ssl_options |= OpenSSL::SSL::OP_NO_SSLv3 if defined?(OpenSSL::SSL::OP_NO_SSLv3)
       ssl_options |= OpenSSL::SSL::OP_NO_TLSv1 if defined?(OpenSSL::SSL::OP_NO_TLSv1)

-      if Proxy::SETTINGS.tls_disabled_versions
-        Proxy::SETTINGS.tls_disabled_versions.each do |version|
+      if @settings.tls_disabled_versions
+        @settings.tls_disabled_versions.each do |version|
           constant = OpenSSL::SSL.const_get("OP_NO_TLSv#{version.to_s.tr('.', '_')}") rescue nil

           if constant
@@ -87,21 +101,32 @@ module Proxy
         end
       end

-      {
+      app_details = {
         :app => app,
-        :server => :webrick,
+        :server => @settings.http_server_type,
         :DoNotListen => true,
         :Port => https_port, # only being used to correctly log https port being used
         :Logger => ::Proxy::LogBuffer::Decorator.instance,
         :ServerSoftware => "foreman-proxy/#{Proxy::VERSION}",
         :SSLEnable => true,
         :SSLVerifyClient => OpenSSL::SSL::VERIFY_PEER,
-        :SSLPrivateKey => load_ssl_private_key(settings.ssl_private_key),
-        :SSLCertificate => load_ssl_certificate(settings.ssl_certificate),
-        :SSLCACertificateFile => settings.ssl_ca_file,
+        :SSLCACertificateFile => @settings.ssl_ca_file,
         :SSLOptions => ssl_options,
         :daemonize => false
       }
+      case @settings.http_server_type
+      when :webrick
+        app_details[:SSLPrivateKey] = load_ssl_private_key(@settings.ssl_private_key)
+        app_details[:SSLCertificate] = load_ssl_certificate(@settings.ssl_certificate)
+      when :puma
+        app_details[:SSLArgs] = {
+          :ca => @settings.ssl_ca_file,
+          :key => @settings.ssl_private_key,
+          :cert => @settings.ssl_certificate,
+          :verify_mode => 'peer'
+        }
+      end
+      app_details
     end

     def load_ssl_private_key(path)
@@ -149,17 +174,84 @@ module Proxy
       retry
     end

-    def webrick_server(app, addresses, port)
+    def add_puma_server_callback(sd_notify)
+      events = ::Puma::Events.new(::Proxy::LogBuffer::Decorator.instance, ::Proxy::LogBuffer::Decorator.instance)
+      events.register(:state) do |status|
+        if status == :running
+          sd_notify.ready_all { logger.info("Smart proxy has finished launching #{sd_notify.total} puma instances, ready to serve requests.") }
+          logger.debug "Finished launching a puma instance, #{sd_notify.pending} instances to go..."
+        end
+      end
+      events
+    end
+
+    def add_puma_server(app, address, port, conn_type, sd_notify)
+      address = "[#{address}]" if address.include?(':')
+      logger.debug "Launching Puma listener at #{address} port #{port}"
+      if conn_type == :ssl
+        require 'cgi'
+        query_list = app[:SSLArgs].to_a.map do |x|
+          "#{CGI::escape(x[0].to_s)}=#{CGI::escape(x[1])}"
+        end
+        host = "ssl://#{address}:#{port}/?#{query_list.join('&')}"
+      else
+        host = address
+      end
+      logger.debug "Host URL: #{host}"
+      # the following lines are from lib/rack/handler/puma.rb#run
+      options = {Verbose: true, Port: port, Host: host}
+      conf = Rack::Handler::Puma.config(app[:app], options)
+      # install callback to notify systemd
+      events = add_puma_server_callback(sd_notify)
+      launcher = ::Puma::Launcher.new(conf, :events => events)
+      @servers << launcher
+      launcher.run
+    end
+
+    def add_webrick_server_callback(app, sd_notify)
+      app[:StartCallback] = lambda do
+        sd_notify.ready_all { logger.info("Smart proxy has finished launching #{sd_notify.total} webrick instances.\nSending NOTIFY_SOCKET, ready to serve requests.") }
+        logger.debug "Finished launching a webrick instance, #{sd_notify.pending} instances to go..."
+      end
+    end
+
+    def add_webrick_server(app, addresses, port, sd_notify)
+      # install callback to notify systemd
+      add_webrick_server_callback(app, sd_notify)
+      # initialize the server
       server = ::WEBrick::HTTPServer.new(app)
-      addresses.each {|a| server.listen(a, port)}
-      server.mount "/", Rack::Handler::WEBrick, app[:app]
+      addresses.each do |address|
+        logger.debug "Launching Webrick listener at #{address} port #{port}"
+        server.listen(address, port)
+      end
+      server.mount '/', Rack::Handler::WEBrick, app[:app]
       server
     end

+    def add_threaded_server(server_name, conn_type, app, addresses, port, sd_notify)
+      result = []
+      case server_name
+      when :webrick
+        result << Thread.new do
+          @servers << add_webrick_server(app, addresses, port, sd_notify).start
+        end
+      when :puma
+        addresses.flatten.each do |address|
+          # Puma listens both on IPv4 and IPv6 on '::', there is no way to make Puma
+          # to listen only on IPv6.
+          address = '::' if address == '*'
+          result << Thread.new do
+            add_puma_server(app, address, port, conn_type, sd_notify)
+          end
+        end
+      end
+      result
+    end
+
     def launch
       raise Exception.new("Both http and https are disabled, unable to start.") unless http_enabled? || https_enabled?

-      if settings.daemon
+      if @settings.daemon
         check_pid
         Process.daemon
         write_pid
@@ -167,16 +259,36 @@ module Proxy

       ::Proxy::PluginInitializer.new(::Proxy::Plugins.instance).initialize_plugins

-      http_app = http_app(settings.http_port)
-      https_app = https_app(settings.https_port)
-      install_webrick_callback!(http_app, https_app)
-
-      t1 = Thread.new { webrick_server(https_app, settings.bind_host, settings.https_port).start } unless https_app.nil?
-      t2 = Thread.new { webrick_server(http_app, settings.bind_host, settings.http_port).start } unless http_app.nil?
+      http_app = http_app(@settings.http_port)
+      https_app = https_app(@settings.https_port)
+      expected = [http_app, https_app].compact.size
+      logger.debug "Expected number of instances to launch: #{expected}"
+      sd_notify = Proxy::SdNotify.new
+      sd_notify.ready_when(expected)
+
+      http_server_name = @settings.http_server_type
+      https_server_name = @settings.http_server_type
+      threads = []
+      if https_app
+        threads += add_threaded_server(https_server_name,
+                                 :ssl,
+                                 https_app,
+                                 @settings.bind_host,
+                                 @settings.https_port,
+                                 sd_notify)
+      end

-      Proxy::SignalHandler.install_traps
+      if http_app
+        threads += add_threaded_server(http_server_name,
+                                 :tcp,
+                                 http_app,
+                                 @settings.bind_host,
+                                 @settings.http_port,
+                                 sd_notify)
+      end

-      (t1 || t2).join
+      Proxy::SignalHandler.install_traps(@servers)
+      threads.each(&:join)
     rescue SignalException => e
       logger.debug("Caught #{e}. Exiting")
       raise
@@ -188,28 +300,5 @@ module Proxy
       puts "Errors detected on startup, see log for details. Exiting: #{e}"
       exit(1)
     end
-
-    def install_webrick_callback!(*apps)
-      apps.compact!
-
-      # track how many webrick apps are still starting up
-      @pending_webrick = apps.size
-      @pending_webrick_lock = Mutex.new
-
-      apps.each do |app|
-        # add a callback to each server, decrementing the pending counter
-        app[:StartCallback] = lambda do
-          @pending_webrick_lock.synchronize do
-            @pending_webrick -= 1
-            launched(apps) if @pending_webrick.zero?
-          end
-        end
-      end
-    end
-
-    def launched(apps)
-      logger.info("Smart proxy has launched on #{apps.size} socket(s), waiting for requests")
-      Proxy::SdNotify.new.tap { |sd| sd.ready if sd.active? }
-    end
   end
 end
diff --git a/lib/proxy/log_buffer/decorator.rb b/lib/proxy/log_buffer/decorator.rb
index 66a532a..1bbce3e 100644
--- a/lib/proxy/log_buffer/decorator.rb
+++ b/lib/proxy/log_buffer/decorator.rb
@@ -121,6 +121,11 @@ module Proxy::LogBuffer
       end
     end

+    # for Puma Event compatibility
+    def sync=(_); end
+    alias_method :log, :info
+    alias_method :puts, :info
+
     def method_missing(symbol, *args);
       @logger.send(symbol, *args)
     end
diff --git a/lib/proxy/sd_notify.rb b/lib/proxy/sd_notify.rb
index 7c267b5..c5d349d 100644
--- a/lib/proxy/sd_notify.rb
+++ b/lib/proxy/sd_notify.rb
@@ -1,8 +1,14 @@
 require 'socket'
+require 'monitor'

 # Implementation of libsystemd's sd_notify API, sends current state via socket
 module Proxy
   class SdNotify
+    def initialize
+      @pending = @total = 1
+      @pending_and_total_lock = Monitor.new
+    end
+
     def active?
       !ENV['NOTIFY_SOCKET'].nil?
     end
@@ -12,12 +18,45 @@ module Proxy
         socket.sendmsg(message.chomp + "\n") # ensure trailing \n
         socket.close
       end
+    rescue Exception => e
+      raise "NOTIFY_SOCKET was set but unable to open: #{e}"
     end

     def ready(state = 1)
       notify("READY=#{state}")
     end

+    # schedule ready call after total number of 'ready_all' calls is done
+    def ready_when(new_total_number)
+      @pending_and_total_lock.synchronize do
+        @pending = @total = new_total_number
+      end
+    end
+
+    # when number of calls matches what was set via 'ready_when' this calls 'ready(state)' method
+    # and optional block is executed
+    def ready_all(state = 1)
+      @pending_and_total_lock.synchronize do
+        @pending -= 1
+        if active? && @pending.zero?
+          yield if block_given?
+          ready(state)
+        end
+      end
+    end
+
+    def total
+      @pending_and_total_lock.synchronize do
+        @total
+      end
+    end
+
+    def pending
+      @pending_and_total_lock.synchronize do
+        @pending
+      end
+    end
+
     private

     def create_socket
diff --git a/lib/proxy/settings/global.rb b/lib/proxy/settings/global.rb
index 6ac6431..f0ea9d0 100644
--- a/lib/proxy/settings/global.rb
+++ b/lib/proxy/settings/global.rb
@@ -2,6 +2,7 @@ module ::Proxy::Settings
   class Global < ::OpenStruct
     DEFAULT_SETTINGS = {
       :settings_directory => Pathname.new(__FILE__).join("..","..","..","..","config","settings.d").expand_path.to_s,
+      :http_server_type => :webrick,
       :https_port => 8443,
       :log_file => "/var/log/foreman-proxy/proxy.log",
       :file_rolling_keep => 6,
diff --git a/lib/proxy/signal_handler.rb b/lib/proxy/signal_handler.rb
index 37427f4..8fefbcd 100644
--- a/lib/proxy/signal_handler.rb
+++ b/lib/proxy/signal_handler.rb
@@ -3,11 +3,11 @@ require 'proxy/log'
 class Proxy::SignalHandler
   include ::Proxy::Log

-  def self.install_traps
+  def self.install_traps(servers)
     handler = new
     handler.install_ttin_trap unless RUBY_PLATFORM =~ /mingw/
-    handler.install_int_trap
-    handler.install_term_trap
+    handler.install_int_trap(servers)
+    handler.install_term_trap(servers)
     handler.install_usr1_trap unless RUBY_PLATFORM =~ /mingw/
   end

@@ -25,12 +25,24 @@ class Proxy::SignalHandler
     end
   end

-  def install_int_trap
-    trap(:INT) { exit(0) }
+  def install_int_trap(servers)
+    trap(:INT) do
+      servers.each do |server|
+        server.shutdown if server && server.respond_to?(:shutdown)
+        server.stop if server && server.respond_to?(:stop)
+      end unless servers.nil?
+      exit(0)
+    end
   end

-  def install_term_trap
-    trap(:TERM) { exit(0) }
+  def install_term_trap(servers)
+    trap(:TERM) do
+      servers.each do |server|
+        server.shutdown if server && server.respond_to?(:shutdown)
+        server.stop if server && server.respond_to?(:stop)
+      end unless servers.nil?
+      exit(0)
+    end
   end

   def install_usr1_trap
diff --git a/lib/puma-patch.rb b/lib/puma-patch.rb
new file mode 100644
index 0000000..be4e4d9
--- /dev/null
+++ b/lib/puma-patch.rb
@@ -0,0 +1,6 @@
+module Puma
+  class Launcher
+    def setup_signals
+    end
+  end
+end
