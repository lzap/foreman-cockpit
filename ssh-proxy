#!/usr/bin/env ruby

require 'net/https'
require 'socket'
require 'openssl'
require 'json'

def dbg(str)
    $stderr.write(str + "\n")
end

def exit_with_problem(code, msg, unused)
  dbg(code)
  dbg(msg)
  exit 1
end

def ssh_proxy(urlstr, params)
  url = URI(urlstr)
  raw_sock = TCPSocket.open(url.hostname, url.port)
  if url.scheme == 'https'
    ssl_context = OpenSSL::SSL::SSLContext.new()
    # ssl_context.cert = OpenSSL::X509::Certificate.new(File.open("certificate.crt"))
    # ssl_context.key = OpenSSL::PKey::RSA.new(File.open("certificate.key"))
    # ssl_context.ssl_version = :SSLv23
    sock = OpenSSL::SSL::SSLSocket.new(raw_sock, ssl_context)
    sock.sync_close = true
    sock.connect
  else
    sock = raw_sock
  end

  data = JSON.dump(params) + "\r\n"
  inp_buf = "POST /ssh/session HTTP/1.1\r\nConnection: upgrade\r\nUpgrade: raw\r\nContent-Length: #{data.length}\r\n\r\n#{data}"
  out_buf = ""

  ws_eof = false
  bridge_eof = false
  expecting_http_header = true

  status = ""

  while true
    readers = [ ]
    writers = [ ]

    readers += [ $stdin ] unless ws_eof
    readers += [ sock ] unless bridge_eof
    writers += [ sock ] unless inp_buf == ""

    if out_buf.length > 0
      if expecting_http_header
        header_end = out_buf.index("\r\n\r\n")
        if header_end
          status_line, headers_text = out_buf[0..header_end].split("\r\n", 2)
          status = status_line.split(" ")[1]
          out_buf = out_buf[header_end+4..-1]
          expecting_http_header = false
          if status != "101"
            m = /^Content-Length:[ \t]*([0-9]+)\r?$/i.match(headers_text)
            if m
              expected_len = m[1].to_i
            else
              expected_len = -1
            end
            while expected_len < 0 || out_buf.length < expected_len
              begin
                out_buf += sock.readpartial(4096)
              rescue EOFError
                break
              end
            end
            if status[0] == "4"
              exit_with_problem("access-denied", out_buf, nil)
            else
              $stderr.write("Error talking to smart proxy: #{out_buf}\n")
              exit 1
            end
          end
        end
      end
      writers += [ $stdout ] unless out_buf == ""
    end

    break if readers.length + writers.length == 0

    r, w, x = IO.select(readers, writers)

    if r.include?(sock)
      begin
        out_buf += sock.readpartial(4096)
      rescue EOFError
        bridge_eof = true
        break if out_buf == ""
      end
    end

    if w.include?(sock)
      n = sock.write(inp_buf)
      inp_buf = inp_buf[n..-1]
      if inp_buf == "" and ws_eof
        raw_sock.close_write()
      end
    end

    if r.include?($stdin)
      begin
        inp_buf += $stdin.readpartial(4096)
      rescue EOFError
        ws_eof = true
        raw_sock.close_write() if inp_buf == ""
      end
    end

    if w.include?($stdout)
      n = $stdout.write(out_buf)
      out_buf = out_buf[n..-1]
      break if out_buf == "" and bridge_eof
    end

  end
end

#ssh_proxy("https://man.mvo.lan:8443", { command: "hostname", hostname: "man.mvo.lan", ssh_user: "root",
#                                        ssh_password: "foobar" })
ssh_proxy("http://dev.mvo.lan:8000", { command: "bash", hostname: "dev.mvo.lan", ssh_user: "root", ssh_password: "foobar" })
